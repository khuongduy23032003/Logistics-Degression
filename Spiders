import numpy as np
import matplotlib.pyplot as plt
epsilon = 1e-20  


def logistic(z):
    return 1 / (1 + np.exp(-z))

def calculate_loss(X, y, params):
    m = len(y)
    predictions = logistic(X @ params)
    loss = -(1/m) * (y.T @ np.log(predictions + epsilon) + (1 - y).T @ np.log(1 - predictions + epsilon))
    return loss

def gradient_descent(X, y, params, alpha, max_iters, tolerance):
    m = len(y)
    loss_history = []
    prev_loss = float('inf')

    for i in range(max_iters):
        predictions = logistic(X @ params)
        gradients = (1/m) * (X.T @ (predictions - y))
        params -= alpha * gradients
        current_loss = calculate_loss(X, y, params)
        loss_history.append(current_loss.flatten())

        if abs(prev_loss - current_loss) < tolerance:
            print(f"Converged at iteration {i+1}")
            break

        prev_loss = current_loss

    return params, loss_history

def classify(X, params):
    return (logistic(X @ params) >= 0.5).astype(int)

grain_sizes = np.array([0.245, 0.247, 0.285, 0.299, 0.327, 0.347, 0.356, 0.36, 0.363, 0.364,
                        0.398, 0.4, 0.409, 0.421, 0.432, 0.473, 0.509, 0.529, 0.561, 0.569,
                        0.594, 0.638, 0.656, 0.816, 0.853, 0.938, 1.036, 1.045])
spider_presence = np.array([0, 0, 1, 1, 1, 1, 0, 1, 0, 1,
                            0, 1, 0, 1, 0, 1, 1, 1, 0, 0,
                            1, 1, 1, 1, 1, 1, 1, 1])

num_samples = len(spider_presence)
X = np.c_[np.ones(num_samples), grain_sizes]
y = spider_presence.reshape(-1, 1)

params = np.zeros((X.shape[1], 1))

alpha = 1e-3
max_iters = 50000
tolerance = 1e-15

params, loss_history = gradient_descent(X, y, params, alpha, max_iters, tolerance)

loss_history = np.array(loss_history).flatten()
plt.figure(figsize=(8, 6))
plt.plot(range(len(loss_history)), loss_history, color='blue')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.grid(True)
plt.show()

predictions = classify(X, params)

plt.figure(figsize=(8, 6))
plt.scatter(grain_sizes, spider_presence, color='blue', label='Actual Data')
plt.scatter(grain_sizes, predictions, color='red', marker='x', label='Predicted Data')
plt.xlabel('Grain Size (mm)')
plt.ylabel('Spider Presence')
plt.legend()
plt.grid(True)
plt.show()

accuracy = np.mean(predictions == y.flatten()) * 100
print(f"Training Accuracy: {accuracy:.2f}%")
